openapi: 3.0.3
info:
  title: Part1
  description: An online bookstore that efficiently manages book inventories, authors, and customer orders.
  version: 1.0.11
servers:
  - url: https://api.co2103.le.ac.uk/v1
    description: Optional server description
  - url: https://api.co2103.le.ac.uk/sandbox
    description: Multiple servers are allowed
tags:
  - name: authors
    description: Operations related to authors
  - name: books
    description: Operations related to books
  - name: orders
    description: Operations related to orders
paths:
  /authors:
    get:
      tags:
        - authors
      summary: List all authors
      responses:
        '200':
          description: OK response
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        '404':
          description: Not Found
          content:  
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
    post:
      tags:
        - authors
      summary: Create a specific author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '409':
          description: Conflict
          content:  
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
  /authors/{id}:
    get:
      tags:
        - authors
      summary: Retrieve a specific author
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the author to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: OK response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'         
    put:
      tags:
        - authors
      summary: Update a specific author
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the author to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '200':
          description: OK response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'    
    delete:
      tags:
        - authors
      summary: Delete a specific author
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the author to delete
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
  /authors/{id}/books:
    get:
      tags:
        - authors
      summary: List all books written by a specific author
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the author
          schema:
            type: integer
      responses:
        '200':
          description: OK response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
  /books:
    get:
      tags:
        - books
      summary: List all books
      responses:
        '200':
          description: OK response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
    post:
      tags:
        - books
      summary: Create a book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'  
  /books/{ISBN}:
    get:
      tags:
        - books
      summary: Retrieve a specific book
      parameters:
        - in: path
          name: ISBN
          required: true
          description: International Standard Book Number (ISBN) of the book to retrieve
          schema:
            type: string
      responses:
        '200':
          description: OK response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
    put:
      tags:
        - books
      summary: Update a specific book
      parameters:
        - in: path
          name: ISBN
          required: true
          description: International Standard Book Number (ISBN) of the book to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: OK response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
    delete:
      tags:
        - books
      summary: Delete a specific book
      parameters:
        - in: path
          name: ISBN
          required: true
          description: International Standard Book Number (ISBN) of the book to delete
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'         
  /books/{ISBN}/authors:
    get:
      tags:
        - books
      summary: List all authors of a book
      parameters:
        - in: path
          name: ISBN
          required: true
          description: International Standard Book Number (ISBN) of the book
          schema:
            type: string
      responses:
        '200':
          description: OK response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo' 
  /books/{ISBN}/orders:
    get:
      tags:
        - books
      summary: List all orders containing a specific book
      parameters:
        - in: path
          name: ISBN
          required: true
          description: International Standard Book Number (ISBN) of the book
          schema:
            type: string
      responses:
        '200':
          description: OK response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'     
  /orders:
    get:
      tags:
        - orders
      summary: List all orders
      responses:
        '200':
          description: OK response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
    post:
      tags:
        - orders
      summary: Create an order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
  /orders/{id}:
    get:
      tags:
        - orders
      summary: Retrieve a specific order
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the order to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: OK response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
    put:
      tags:
        - orders
      summary: Update a specific order
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the order to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
      responses:
        '200':
          description: OK response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
  /orders/{id}/books:
    get:
      tags:
        - orders
      summary: List all books in an order
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the order
          schema:
            type: integer
      responses:
        '200':
          description: OK response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
    post:
      tags:
        - orders
      summary: Add a book to an existing order
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the order to which the book will be added
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ISBN:
                  type: string
                  description: International Standard Book Number (ISBN) of the book to add
                quantity:
                  type: integer
                  description: The quantity of the book to add to the order
      responses:
        '200':
          description: OK response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
  /orders/{id}/books/{ISBN}:
    delete:
      tags:
        - orders
      summary: Remove a book from an existing order
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the order from which the book will be removed
          schema:
            type: integer
        - in: path
          name: ISBN
          required: true
          description: International Standard Book Number (ISBN) of the book to remove
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'              


components:
  schemas:
    Author:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        birthyear:
          type: integer
        nationality:
          type: string
      required:
        - id
        - name
        - birthyear
        - nationality
    Book:
      type: object
      properties:
        ISBN:
          type: string
        title:
          type: string
        publicationYear:
          type: integer
        price:
          type: number
      required:
        - ISBN
        - title
        - publicationYear
        - price
    Order:
      type: object
      properties:
        id:
          type: integer
        datetime:
          type: string
          format: date-time
        customerName:
          type: string
      required:
        - id
        - datetime
        - customerName
    OrderInput:
      type: object
      properties:
        customerName:
          type: string
        books:
          type: array
          items:
            $ref: '#/components/schemas/BookInput'
      required:
        - customerName
    BookInput:
      type: object
      properties:
        ISBN:
          type: string
        title:
          type: string
        publicationYear:
          type: integer
        price:
          type: number
      required:
        - ISBN
        - title
        - publicationYear
        - price

    ErrorInfo:
      type: object
      properties:
        message:
          type: string
          default: Error Message

                    